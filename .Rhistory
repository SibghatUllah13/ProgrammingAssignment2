makeCacheMatrix <- function(x = matrix()) {
inverse_matrix<-NULL
set<-function(y)
{
x<<-y
inverse_matrix<<-NULL
}
get<-function()
{
x
}
setinverse<-function(solve)
{
inverse_matrix<<- solve
}
getinverse<-function()
{
inverse_matrix
}
list(set=set, get=get,
setinverse=setinverse,
getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse_matrix<-x$getinverse()
if(!is.null(inverse_matrix))
{
message("getting cached data")
return(inverse_matrix)
}
matrix<-x$get()
inverse_matrix<-solve(matrix, ...)
x$setinverse(inverse_matrix)
inverse_matrix
}
makeCacheMatrix(matrix(1:4,2,2))
makeCacheMatrix(j)
makeCacheMatrix <- function(x = matrix()) {
inverse_matrix<-NULL
set<-function(y)
{
x<<-y
inverse_matrix<<-NULL
}
get<-function()
{
x
}
setinverse<-function(solve)
{
inverse_matrix<<- solve
}
getinverse<-function()
{
inverse_matrix
}
list(set=set, get=get,
setinverse=setinverse,
getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse_matrix<-x$getinverse()
if(!is.null(inverse_matrix))
{
message("getting cached data")
return(inverse_matrix)
}
matrix<-x$get()
inverse_matrix<-solve(matrix, ...)
x$setinverse(inverse_matrix)
inverse_matrix
}
makeCacheMatrix(f)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
###### This function creates a special "matrix" object that will cache its inverse ###
makeCacheMatrix <- function(x = matrix()) {
#### Set the Variables inv to Null for now, and set the matrix x #######
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
###### Function to get the value of matrix x ##########
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
#### A special list which will be used by function cacheSolve ########
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
############## Function to compute the value of matrix sent by above function ####
cacheSolve <- function(x, ...) {
### if the inverse has already been computed,it will retrieve the inverse from cache ##
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
### else, it will compute it itself ####
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
###### This function creates a special "matrix" object that will cache its inverse ###
makeCacheMatrix <- function(x = matrix()) {
#### Set the Variables inv to Null for now, and set the matrix x #######
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
###### Function to get the value of matrix x ##########
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
#### A special list which will be used by function cacheSolve ########
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
############## Function to compute the value of matrix sent by above function ####
cacheSolve <- function(x, ...) {
### if the inverse has already been computed,it will retrieve the inverse from cache ##
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
### else, it will compute it itself ####
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
